        -:    0:Source:D:/FacultyProjects/OOP/ImmobileAdministrator/presentation/userInterface.c
        -:    0:Graph:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\presentation\userInterface.c.gcno
        -:    0:Data:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\presentation\userInterface.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Hodosi on 3/5/2021.
        -:    3://
        -:    4:
        -:    5:#include "userInterface.h"
        -:    6:
        -:    7:#include <stdio.h>
        -:    8:#include <stdlib.h>
        -:    9:#include <string.h>
        -:   10:#include <stdbool.h>
        -:   11:#include <math.h>
        -:   12:
        1:   13:UserInterfaceImmobile* createUserInterface(ServiceImmobile *service){
        1:   14:    UserInterfaceImmobile *user_interface = (UserInterfaceImmobile*)malloc(sizeof(UserInterfaceImmobile));
        -:   15:
        1:   16:    user_interface -> service_immobile = service;
        -:   17:
        1:   18:    return user_interface;
        1:   18-block  0
        -:   19:}
        -:   20:
        1:   21:void destroyUserInterface(UserInterfaceImmobile *user_interface){
        1:   22:    destroyService(user_interface -> service_immobile);
        1:   22-block  0
        1:   23:    free(user_interface);
        1:   24:}
        -:   25:
        1:   26:void showApartmentsUI(UserInterfaceImmobile *ui){
        1:   27:    Element items = getApartments(ui -> service_immobile);
        1:   27-block  0
        -:   28:
        1:   29:    DynamicVector *vector = items;
        -:   30:    //DynamicStaticVector *vector = items;
        -:   31:
        -:   32:    Apartment *apartment;
        -:   33:
        -:   34:    char type[256];
        -:   35:
        2:   36:    for(int number_of_apartment = 0; number_of_apartment < vector -> length; number_of_apartment++){
        2:   36-block  0
        1:   37:        apartment = vector -> items[number_of_apartment];
        1:   38:        printf("%d ", apartment -> number_of_apartment);
        1:   38-block  0
        5:   39:        for(int number_of_expense = 0; number_of_expense < apartment -> number_of_expenses; number_of_expense++){
        5:   39-block  0
        4:   40:            getType(apartment -> expenses[number_of_expense], type);
        4:   40-block  0
        4:   41:            printf("%s ", type);
        4:   42:            printf("%f ",  getCost(apartment -> expenses[number_of_expense]));
        -:   43:        }
        1:   44:        printf("\n");
        1:   44-block  0
        -:   45:    }
        1:   46:    printf("\n");
        1:   46-block  0
        1:   47:}
        -:   48:
        1:   49:int generateApartmentsUI(UserInterfaceImmobile *ui){
        -:   50:    char number_of_apartments_str[256];
        1:   51:    printf("Give the number of apartments you want to be menage:\n");
        1:   51-block  0
        1:   52:    scanf("%s", number_of_apartments_str);
        -:   53:
        1:   54:    int number_of_apartments = atoi(number_of_apartments_str);
        1:   55:    if(number_of_apartments == 0){
    #####:   56:        return 2;
    %%%%%:   56-block  0
        -:   57:    }
        -:   58:
        1:   59:    generateApartments(ui -> service_immobile, number_of_apartments);
        1:   59-block  0
        -:   60:
        1:   61:    return 0;
        -:   62:}
        -:   63:
    #####:   64:int addExpensesUI(UserInterfaceImmobile *ui){
        -:   65:    char number_of_apartments_str[64];
        -:   66:    char cost_str[64];
        -:   67:    char type[64];
        -:   68:
    #####:   69:    printf("Give the number of apartment:\n");
    %%%%%:   69-block  0
    #####:   70:    scanf("%s", number_of_apartments_str);
        -:   71:
    #####:   72:    printf("Give the cost:\n");
    #####:   73:    scanf("%s", cost_str);
        -:   74:
    #####:   75:    printf("Give the type:\n");
    #####:   76:    scanf("%s", type);
        -:   77:
    #####:   78:    bool zero = false;
    #####:   79:    if(strcmp(number_of_apartments_str, "0") == 0){
    #####:   80:        zero = true;
    %%%%%:   80-block  0
        -:   81:    }
        -:   82:
    #####:   83:    int number_of_apartments = atoi(number_of_apartments_str);
    %%%%%:   83-block  0
    #####:   84:    if(number_of_apartments == 0 && !zero){
    %%%%%:   84-block  0
    #####:   85:        return 2;
    %%%%%:   85-block  0
        -:   86:    }
        -:   87:
    #####:   88:    double cost = atof(cost_str);
    %%%%%:   88-block  0
    #####:   89:    if(fabs(cost - 0.0) < 0.0001){
    #####:   90:        return 2;
    %%%%%:   90-block  0
        -:   91:    }
        -:   92:
    #####:   93:    if(addExpense(ui -> service_immobile, number_of_apartments, cost, type) != 0){
    %%%%%:   93-block  0
    #####:   94:        return 2;
    %%%%%:   94-block  0
        -:   95:    }
        -:   96:
    #####:   97:    return 0;
    %%%%%:   97-block  0
        -:   98:}
    #####:   99:int modifyExpenseUI(UserInterfaceImmobile *ui){
        -:  100:    char number_of_apartments_str[64];
        -:  101:    char cost_str[64];
        -:  102:    char type[64];
        -:  103:
    #####:  104:    printf("Give the number of apartment:\n");
    %%%%%:  104-block  0
    #####:  105:    scanf("%s", number_of_apartments_str);
        -:  106:
    #####:  107:    printf("Give the cost:\n");
    #####:  108:    scanf("%s", cost_str);
        -:  109:
    #####:  110:    printf("Give the type:\n");
    #####:  111:    scanf("%s", type);
        -:  112:
    #####:  113:    bool zero = false;
    #####:  114:    if(strcmp(number_of_apartments_str, "0") == 0){
    #####:  115:        zero = true;
    %%%%%:  115-block  0
        -:  116:    }
        -:  117:
    #####:  118:    int number_of_apartments = atoi(number_of_apartments_str);
    %%%%%:  118-block  0
    #####:  119:    double cost = atof(cost_str);
        -:  120:
    #####:  121:    if(number_of_apartments == 0 && !zero){
    %%%%%:  121-block  0
    #####:  122:        return 2;
    %%%%%:  122-block  0
        -:  123:    }
    #####:  124:    if(fabs(cost - 0.0) < 0.0001){
    %%%%%:  124-block  0
    #####:  125:        return 2;
    %%%%%:  125-block  0
        -:  126:    }
        -:  127:
    #####:  128:    if(modifyExpense(ui -> service_immobile, number_of_apartments, cost, type) != 0){
    %%%%%:  128-block  0
    #####:  129:        return 2;
    %%%%%:  129-block  0
        -:  130:    }
        -:  131:
    #####:  132:    return 0;
    %%%%%:  132-block  0
        -:  133:}
    #####:  134:int deleteExpenseUI(UserInterfaceImmobile *ui){
        -:  135:    char number_of_apartments_str[64];
        -:  136:    char type[64];
        -:  137:
    #####:  138:    printf("Give the number of apartment:\n");
    %%%%%:  138-block  0
    #####:  139:    scanf("%s", number_of_apartments_str);
        -:  140:
    #####:  141:    printf("Give the type:\n");
    #####:  142:    scanf("%s", type);
        -:  143:
    #####:  144:    bool zero = false;
    #####:  145:    if(strcmp(number_of_apartments_str, "0") == 0){
    #####:  146:        zero = true;
    %%%%%:  146-block  0
        -:  147:    }
        -:  148:
    #####:  149:    int number_of_apartments = atoi(number_of_apartments_str);
    %%%%%:  149-block  0
    #####:  150:    if(number_of_apartments == 0 && !zero){
    %%%%%:  150-block  0
    #####:  151:        return 2;
    %%%%%:  151-block  0
        -:  152:    }
        -:  153:
    #####:  154:    if(deleteExpense(ui -> service_immobile, number_of_apartments, type) != 0){
    %%%%%:  154-block  0
    #####:  155:        return 2;
    %%%%%:  155-block  0
        -:  156:    }
        -:  157:
    #####:  158:    return 0;
    %%%%%:  158-block  0
        -:  159:}
        -:  160:
    #####:  161:int viewExpensesByPropertyUI(UserInterfaceImmobile *ui){
        -:  162:    char min_cost_str[64];
        -:  163:    char max_cost_str[64];
        -:  164:    char type[64];
        -:  165:
    #####:  166:    printf("Give the min cost:\n");
    %%%%%:  166-block  0
    #####:  167:    scanf("%s", min_cost_str);
        -:  168:
    #####:  169:    printf("Give the max cost:\n");
    #####:  170:    scanf("%s", max_cost_str);
        -:  171:
    #####:  172:    printf("Give the type:\n");
    #####:  173:    scanf("%s", type);
        -:  174:
    #####:  175:    double min_cost = atof(min_cost_str);
    #####:  176:    double max_cost = atof(max_cost_str);
    #####:  177:    if(fabs(min_cost - 0.0) < 0.0001 || fabs(max_cost - 0.0) < 0.0001 ){
    %%%%%:  177-block  0
    #####:  178:        return 2;
    %%%%%:  178-block  0
        -:  179:    }
        -:  180:
    #####:  181:    Element items = filtrationBySumAndType(ui -> service_immobile, min_cost, max_cost, type);
    %%%%%:  181-block  0
        -:  182:
    #####:  183:    if(items == NULL){
    #####:  184:        return 2;
    %%%%%:  184-block  0
        -:  185:    }
        -:  186:
    #####:  187:    DynamicVector *vector = items;
        -:  188:    //DynamicStaticVector *vector = items;
        -:  189:
        -:  190:    Apartment *apartment;
        -:  191:
    #####:  192:    for(int number_of_apartment = 0; number_of_apartment < vector -> length; number_of_apartment++){
    %%%%%:  192-block  0
    %%%%%:  192-block  1
    #####:  193:        apartment = vector -> items[number_of_apartment];
    #####:  194:        printf("%d ", apartment -> number_of_apartment);
    %%%%%:  194-block  0
    #####:  195:        for(int number_of_expense = 0; number_of_expense < apartment -> number_of_expenses; number_of_expense++){
    %%%%%:  195-block  0
    #####:  196:            getType(apartment -> expenses[number_of_expense], type);
    %%%%%:  196-block  0
    #####:  197:            printf("%s ", type);
    #####:  198:            printf("%f ",  getCost(apartment -> expenses[number_of_expense]));
        -:  199:        }
    #####:  200:        printf("\n");
    %%%%%:  200-block  0
        -:  201:    }
    #####:  202:    printf("\n");
    %%%%%:  202-block  0
        -:  203:
    #####:  204:    destroyDynamicVector(vector);
        -:  205:    //destroyDynamicStaticVector(vector);
        -:  206:
    #####:  207:    return 0;
        -:  208:
        -:  209:}
        -:  210:
    #####:  211:int viewExpensesOrderedUI(UserInterfaceImmobile *ui){
        -:  212:    char type[64];
        -:  213:
    #####:  214:    printf("Give the type:\n");
    %%%%%:  214-block  0
    #####:  215:    scanf("%s", type);
        -:  216:
    #####:  217:    Element items = sortingApartmentsBySum(ui -> service_immobile, type);
        -:  218:
    #####:  219:    if(items == NULL){
    #####:  220:        return 2;
    %%%%%:  220-block  0
        -:  221:    }
        -:  222:
    #####:  223:    DynamicVector *vector = items;
        -:  224:    //DynamicStaticVector *vector = items;
        -:  225:
        -:  226:    Apartment *apartment;
        -:  227:
    #####:  228:    for(int number_of_apartment = 0; number_of_apartment < vector -> length; number_of_apartment++){
    %%%%%:  228-block  0
    %%%%%:  228-block  1
    #####:  229:        apartment = vector -> items[number_of_apartment];
    #####:  230:        printf("%d ", apartment -> number_of_apartment);
    %%%%%:  230-block  0
    #####:  231:        for(int number_of_expense = 0; number_of_expense < apartment -> number_of_expenses; number_of_expense++){
    %%%%%:  231-block  0
    #####:  232:            getType(apartment -> expenses[number_of_expense], type);
    %%%%%:  232-block  0
    #####:  233:            printf("%s ", type);
    #####:  234:            printf("%f ",  getCost(apartment -> expenses[number_of_expense]));
        -:  235:        }
    #####:  236:        printf("\n");
    %%%%%:  236-block  0
        -:  237:    }
    #####:  238:    printf("\n");
    %%%%%:  238-block  0
        -:  239:
    #####:  240:    destroyDynamicVector(vector);
        -:  241:    //destroyDynamicStaticVector(vector);
        -:  242:
    #####:  243:    return 0;
        -:  244:
        -:  245:}
        -:  246:
        1:  247:void showMenu(){
        1:  248:    printf("1. Add expenses for an apartment\n");
        1:  248-block  0
        1:  249:    printf("2. Modification of an existing expense (type, amount)\n");
        1:  250:    printf("3. Delete the expense\n");
        1:  251:    printf("4. View the list of expenses filtered by a property (amount, type, apartment)\n");
        1:  252:    printf("5. View the list of expenses ordered by amount or type (ascending / descending)\n");
        1:  253:    printf("exit\n");
        1:  254:    printf("\n");
        1:  255:}
        -:  256:
        1:  257:void runUserInterface(UserInterfaceImmobile* ui){
        -:  258:    char command[10];
        -:  259:
        1:  260:    int valid_command = generateApartmentsUI(ui);
        1:  260-block  0
        1:  261:    if(valid_command != 0){
    #####:  262:        printf("Invalid input!");
    %%%%%:  262-block  0
    #####:  263:        return;
        -:  264:    }
        -:  265:
        -:  266:    while (true){
        1:  267:        showApartmentsUI(ui);
        1:  267-block  0
        1:  268:        showMenu();
        1:  269:        scanf("%s", command);
        1:  270:        if(strcmp(command, "exit") == 0){
        1:  271:            printf("Good Bye!\n");
        1:  271-block  0
        1:  272:            return;
        -:  273:        }
    #####:  274:        else if(strcmp(command, "1") == 0){
    %%%%%:  274-block  0
    #####:  275:            if(addExpensesUI(ui) != 0){
    %%%%%:  275-block  0
    #####:  276:                printf("Invalid input!\n");
    %%%%%:  276-block  0
        -:  277:            }
        -:  278:        }
    #####:  279:        else if(strcmp(command, "2") == 0){
    %%%%%:  279-block  0
    #####:  280:            if(modifyExpenseUI(ui) != 0){
    %%%%%:  280-block  0
    #####:  281:                printf("Invalid input!\n");
    %%%%%:  281-block  0
        -:  282:            }
        -:  283:        }
    #####:  284:        else if(strcmp(command, "3") == 0){
    %%%%%:  284-block  0
    #####:  285:            if(deleteExpenseUI(ui) != 0){
    %%%%%:  285-block  0
    #####:  286:                printf("Invalid input!\n");
    %%%%%:  286-block  0
        -:  287:            }
        -:  288:        }
    #####:  289:        else if(strcmp(command, "4") == 0){
    %%%%%:  289-block  0
    #####:  290:            if(viewExpensesByPropertyUI(ui) != 0){
    %%%%%:  290-block  0
    #####:  291:                printf("Invalid input!\n");
    %%%%%:  291-block  0
        -:  292:            }
        -:  293:        }
    #####:  294:        else if(strcmp(command, "5") == 0){
    %%%%%:  294-block  0
    #####:  295:            if(viewExpensesOrderedUI(ui) != 0){
    %%%%%:  295-block  0
    #####:  296:                printf("Invalid input!\n");
    %%%%%:  296-block  0
        -:  297:            }
        -:  298:        }
        -:  299:        else{
    #####:  300:            printf("Invalid command!\n");
    %%%%%:  300-block  0
        -:  301:        }
        -:  302:    }
        -:  303:}

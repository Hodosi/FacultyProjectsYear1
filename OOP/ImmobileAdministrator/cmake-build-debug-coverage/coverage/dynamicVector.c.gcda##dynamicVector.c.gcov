        -:    0:Source:D:/FacultyProjects/OOP/ImmobileAdministrator/persistence/dynamicVector.c
        -:    0:Graph:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\persistence\dynamicVector.c.gcno
        -:    0:Data:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\persistence\dynamicVector.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Hodosi on 3/6/2021.
        -:    3://
        -:    4:
        -:    5:#include "dynamicVector.h"
        -:    6:#include "stdlib.h"
        -:    7:
        -:    8:#define INIT_CAPACITY 1
        -:    9:
        6:   10:DynamicVector* createDynamicVector(){
        -:   11:
        6:   12:    DynamicVector* vector = malloc(sizeof(DynamicVector));
        6:   13:    vector -> items = (Element*)malloc(sizeof(Element) * INIT_CAPACITY);
        6:   14:    vector -> capacity = INIT_CAPACITY;
        6:   15:    vector -> length = 0;
        6:   16:    return vector;
        6:   16-block  0
        -:   17:}
        -:   18:
        6:   19:void destroyDynamicVector(DynamicVector* vector){
        6:   20:    free(vector -> items);
        6:   21:    free(vector);
        6:   22:}
        -:   23:
        6:   24:void resize(DynamicVector* vector){
        6:   25:    int new_capacity = 2 * vector -> capacity;
        -:   26:
        6:   27:    Element* new_items = (Element*)malloc(sizeof(Element) * new_capacity);
        -:   28:
       14:   29:    for(int i = 0; i < vector -> length; i++){
        6:   29-block  0
       14:   29-block  1
        8:   30:        new_items[i] = vector -> items[i];
        8:   30-block  0
        -:   31:    }
        -:   32:
        6:   33:    free(vector -> items);
        6:   34:    vector -> items = new_items;
        6:   35:    vector -> capacity = new_capacity;
        -:   36:
        6:   37:}
        -:   38:
       14:   39:void add(DynamicVector* vector, Element item){
       14:   40:    if(vector -> length == vector -> capacity){
       14:   40-block  0
        6:   41:        resize(vector);
        6:   41-block  0
        -:   42:    }
       14:   43:    vector -> items[vector -> length] = item;
       14:   44:    vector -> length++;
       14:   45:}
        -:   46:

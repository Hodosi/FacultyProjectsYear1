        -:    0:Source:D:/FacultyProjects/OOP/ImmobileAdministrator/test/test.c
        -:    0:Graph:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\test\test.c.gcno
        -:    0:Data:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\test\test.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Hodosi on 3/5/2021.
        -:    3://
        -:    4:
        -:    5:#include "test.h"
        -:    6:
        -:    7:#include "../business/service.h"
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include <string.h>
        -:   12:#include <math.h>
        -:   13:
        1:   14:void runDomainTests(){
        1:   15:    printf("Start of domain tests...\n");
        1:   15-block  0
        -:   16:
        -:   17:    //expense tests
        1:   18:    int number_of_apartment = 1;
        1:   19:    double cost = 4.5;
        1:   20:    char type[256] = "water";
        -:   21:    char test_type[256];
        -:   22:
        -:   23:    //create test
        1:   24:    Expense *expense = createExpense(number_of_apartment, cost, type);
        -:   25:
       1*:   26:    assert(getApartmentNumberOfExpense(expense) == number_of_apartment);
    %%%%%:   26-block  0
        1:   26-block  1
       1*:   27:    assert(getCost(expense) == cost);
        1:   27-block  0
    %%%%%:   27-block  1
        1:   27-block  2
        1:   28:    getType(expense, test_type);
        1:   28-block  0
       1*:   29:    assert(strcmp(test_type, type) == 0);
    %%%%%:   29-block  0
        1:   29-block  1
        -:   30:
        -:   31:    //destroy test
        1:   32:    destroyExpense(expense);
        1:   32-block  0
        -:   33:
        -:   34:    //apartment tests
        -:   35:    //create test
        1:   36:    Apartment *apartment = createApartment(number_of_apartment);
        -:   37:
        -:   38:    //test number of apartment
       1*:   39:    assert(getApartmentNumber(apartment) == number_of_apartment);
    %%%%%:   39-block  0
        1:   39-block  1
        -:   40:
        -:   41:    //test number of expenses and cost
        1:   42:    double new_cost = 8.9;
        5:   43:    for(int i = 0; i < apartment -> number_of_expenses; i++){
        1:   43-block  0
        4:   43-block  1
        5:   43-block  2
       4*:   44:        assert(getApartmentNumberOfExpense(apartment -> expenses[i]) == number_of_apartment);
        4:   44-block  0
    %%%%%:   44-block  1
        4:   44-block  2
       4*:   45:        assert(getCost(apartment -> expenses[i]) == 0);
        4:   45-block  0
    %%%%%:   45-block  1
        4:   45-block  2
        4:   46:        setCost(apartment -> expenses[i], new_cost);
        4:   46-block  0
       4*:   47:        assert(getCost(apartment -> expenses[i]) == new_cost);
    %%%%%:   47-block  0
        4:   47-block  1
        -:   48:    }
        -:   49:
        -:   50:    //test get cost by type
        1:   51:    cost = getCostByType(apartment, type);
        1:   51-block  0
       1*:   52:    assert(fabs(cost - new_cost) < 0.01);
    %%%%%:   52-block  0
        1:   52-block  1
        -:   53:
        -:   54:    //test set cost by type
        1:   55:    cost = 6.7;
        1:   56:    setCostByType(apartment, type, cost);
        1:   56-block  0
        1:   57:    new_cost = getCostByType(apartment, type);
       1*:   58:    assert(fabs(cost - new_cost) < 0.01);
    %%%%%:   58-block  0
        1:   58-block  1
        -:   59:
        -:   60:    //test type
        1:   61:    getType(apartment -> expenses[0], type);
        1:   61-block  0
       1*:   62:    assert(strcmp(type, "water") == 0);
    %%%%%:   62-block  0
        1:   62-block  1
        -:   63:
        1:   64:    getType(apartment -> expenses[1], type);
        1:   64-block  0
       1*:   65:    assert(strcmp(type, "sewer") == 0);
    %%%%%:   65-block  0
        1:   65-block  1
        -:   66:
        1:   67:    getType(apartment -> expenses[2], type);
        1:   67-block  0
       1*:   68:    assert(strcmp(type, "heating") == 0);
    %%%%%:   68-block  0
        1:   68-block  1
        -:   69:
        1:   70:    getType(apartment -> expenses[3], type);
        1:   70-block  0
       1*:   71:    assert(strcmp(type, "gas") == 0);
    %%%%%:   71-block  0
        1:   71-block  1
        -:   72:
        -:   73:    //destroy test
        1:   74:    destroyApartment(apartment);
        1:   74-block  0
        -:   75:
        1:   76:    printf("End of domain tests...\n");
        1:   77:}
        -:   78:
        1:   79:void runRepositoryTests(){
        1:   80:    printf("Start of repository tests...\n");
        1:   80-block  0
        -:   81:
        1:   82:    int number_of_apartment = 0;
        1:   83:    Apartment *apartment = createApartment(number_of_apartment);
        -:   84:
        -:   85:    //create test
        1:   86:    RepositoryImmobile* repository = createRepository();
        -:   87:
       1*:   88:    assert(getRepositorySize(repository) == 0);
    %%%%%:   88-block  0
        1:   88-block  1
        -:   89:
        1:   90:    addApartment(repository, apartment);
        1:   90-block  0
        -:   91:
       1*:   92:    assert(getRepositorySize(repository) == 1);
    %%%%%:   92-block  0
        1:   92-block  1
        -:   93:
        -:   94:    //get all apartments test
        1:   95:    DynamicVector *vector = getAllApartments(repository);
        1:   95-block  0
        -:   96:    //DynamicStaticVector *vector = getAllApartments(repository);
        -:   97:
       1*:   98:    assert(getApartmentNumber(vector->items[0]) == number_of_apartment);
    %%%%%:   98-block  0
        1:   98-block  1
        -:   99:
        -:  100:    //get apartment test
        1:  101:    Apartment *new_apartment = getApartmentByNumber(repository, number_of_apartment);
        1:  101-block  0
       1*:  102:    assert(getApartmentNumber(new_apartment) == number_of_apartment);
    %%%%%:  102-block  0
        1:  102-block  1
        -:  103:
        -:  104:    //destroy test
        1:  105:    destroyRepository(repository);
        1:  105-block  0
        -:  106:
        1:  107:    printf("End of repository tests...\n");
        1:  108:}
        -:  109:
        -:  110:
        1:  111:void runServiceCrudTests(){
        1:  112:    printf("Start of service tests...\n");
        1:  112-block  0
        -:  113:
        1:  114:    RepositoryImmobile* repository = createRepository();
        -:  115:
        -:  116:    //create test
        1:  117:    ServiceImmobile* service = createService(repository);
        -:  118:
        1:  119:    int number_of_apartments = 2;
        -:  120:
        -:  121:    //////////////////////////////////////////////////////////////
        -:  122:    //generate apartments test
        1:  123:    generateApartments(service, number_of_apartments);
        -:  124:
        -:  125:    //get all apartments test
        1:  126:    DynamicVector *vector = getAllApartments(repository);
        -:  127:    //DynamicStaticVector* vector = getApartments(service);
        -:  128:
       1*:  129:    assert(getApartmentNumber(vector->items[0]) == 0);
    %%%%%:  129-block  0
        1:  129-block  1
       1*:  130:    assert(getApartmentNumber(vector->items[1]) == 1);
        1:  130-block  0
    %%%%%:  130-block  1
        1:  130-block  2
        -:  131:
        -:  132:    /////////////////////////////////////////////////////////////////////////
        -:  133:    //add expense test with valid input
        1:  134:    int number_of_apartment = 1;
        1:  135:    double cost = 4.5;
        -:  136:    double cost_before, cost_after, new_cost;
        1:  137:    char type[256] = "gas";
        -:  138:
        1:  139:    Apartment* apartment = getApartmentByNumber(repository, number_of_apartment);
        1:  139-block  0
        1:  140:    cost_before = getCostByType(apartment, type);
        1:  141:    addExpense(service, number_of_apartment, cost, type);
        1:  142:    cost_after = getCostByType(apartment, type);
        -:  143:
        1:  144:    new_cost = cost_before + cost;
       1*:  145:    assert(fabs(new_cost - cost_after) < 0.001);
    %%%%%:  145-block  0
        1:  145-block  1
        -:  146:
        -:  147:    //add expense test with invalid input
        -:  148:    //invalid number
        1:  149:    number_of_apartment = -1;
        1:  150:    cost = 4.5;
        1:  151:    strcpy(type, "water");
       1*:  152:    assert(addExpense(service, number_of_apartment, cost, type) != 0);
        1:  152-block  0
    %%%%%:  152-block  1
        1:  152-block  2
        -:  153:
        1:  154:    number_of_apartment = 2;
        1:  155:    cost = 4.5;
        1:  156:    strcpy(type, "water");
       1*:  157:    assert(addExpense(service, number_of_apartment, cost, type) != 0);
        1:  157-block  0
    %%%%%:  157-block  1
        1:  157-block  2
        -:  158:
        -:  159:    //invalid type
        1:  160:    number_of_apartment = 1;
        1:  161:    cost = 4.5;
        1:  162:    strcpy(type, "");
       1*:  163:    assert(addExpense(service, number_of_apartment, cost, type) != 0);
        1:  163-block  0
    %%%%%:  163-block  1
        1:  163-block  2
        -:  164:
        1:  165:    number_of_apartment = 1;
        1:  166:    cost = 4.5;
        1:  167:    strcpy(type, "yes sir");
       1*:  168:    assert(addExpense(service, number_of_apartment, cost, type) != 0);
        1:  168-block  0
    %%%%%:  168-block  1
        1:  168-block  2
        -:  169:
        -:  170:    //valid type and number
        1:  171:    number_of_apartment = 1;
        1:  172:    cost = 4.5;
        1:  173:    strcpy(type, "water");
       1*:  174:    assert(addExpense(service, number_of_apartment, cost, type) == 0);
        1:  174-block  0
    %%%%%:  174-block  1
        1:  174-block  2
        -:  175:
        1:  176:    number_of_apartment = 1;
        1:  177:    cost = 4.5;
        1:  178:    strcpy(type, "sewer");
       1*:  179:    assert(addExpense(service, number_of_apartment, cost, type) == 0);
        1:  179-block  0
    %%%%%:  179-block  1
        1:  179-block  2
        -:  180:
        1:  181:    number_of_apartment = 1;
        1:  182:    cost = 4.5;
        1:  183:    strcpy(type, "heating");
       1*:  184:    assert(addExpense(service, number_of_apartment, cost, type) == 0);
        1:  184-block  0
    %%%%%:  184-block  1
        1:  184-block  2
        -:  185:
        1:  186:    number_of_apartment = 1;
        1:  187:    cost = 4.5;
        1:  188:    strcpy(type, "gas");
       1*:  189:    assert(addExpense(service, number_of_apartment, cost, type) == 0);
        1:  189-block  0
    %%%%%:  189-block  1
        1:  189-block  2
        -:  190:
        -:  191:    /////////////////////////////////////////////////////////////////
        -:  192:    //modify expense
        1:  193:    cost = 7.53;
        1:  194:    modifyExpense(service, number_of_apartment, cost, type);
        1:  194-block  0
        1:  195:    cost_after = getCostByType(apartment, type);
        -:  196:
       1*:  197:    assert(fabs(cost - cost_after) < 0.001);
    %%%%%:  197-block  0
        1:  197-block  1
        -:  198:
        -:  199:    //add expense test with invalid input
        -:  200:    //invalid number
        1:  201:    number_of_apartment = -1;
        1:  202:    cost = 4.5;
        1:  203:    strcpy(type, "water");
       1*:  204:    assert(modifyExpense(service, number_of_apartment, cost, type) != 0);
        1:  204-block  0
    %%%%%:  204-block  1
        1:  204-block  2
        -:  205:
        1:  206:    number_of_apartment = 2;
        1:  207:    cost = 4.5;
        1:  208:    strcpy(type, "water");
       1*:  209:    assert(modifyExpense(service, number_of_apartment, cost, type) != 0);
        1:  209-block  0
    %%%%%:  209-block  1
        1:  209-block  2
        -:  210:
        -:  211:    //invalid type
        1:  212:    number_of_apartment = 1;
        1:  213:    cost = 4.5;
        1:  214:    strcpy(type, "");
       1*:  215:    assert(modifyExpense(service, number_of_apartment, cost, type) != 0);
        1:  215-block  0
    %%%%%:  215-block  1
        1:  215-block  2
        -:  216:
        1:  217:    number_of_apartment = 1;
        1:  218:    cost = 4.5;
        1:  219:    strcpy(type, "yes sir");
       1*:  220:    assert(modifyExpense(service, number_of_apartment, cost, type) != 0);
        1:  220-block  0
    %%%%%:  220-block  1
        1:  220-block  2
        -:  221:
        -:  222:    //valid type and number
        1:  223:    number_of_apartment = 1;
        1:  224:    cost = 4.5;
        1:  225:    strcpy(type, "water");
       1*:  226:    assert(modifyExpense(service, number_of_apartment, cost, type) == 0);
        1:  226-block  0
    %%%%%:  226-block  1
        1:  226-block  2
        -:  227:
        1:  228:    number_of_apartment = 1;
        1:  229:    cost = 4.5;
        1:  230:    strcpy(type, "sewer");
       1*:  231:    assert(modifyExpense(service, number_of_apartment, cost, type) == 0);
        1:  231-block  0
    %%%%%:  231-block  1
        1:  231-block  2
        -:  232:
        1:  233:    number_of_apartment = 1;
        1:  234:    cost = 4.5;
        1:  235:    strcpy(type, "heating");
       1*:  236:    assert(modifyExpense(service, number_of_apartment, cost, type) == 0);
        1:  236-block  0
    %%%%%:  236-block  1
        1:  236-block  2
        -:  237:
        1:  238:    number_of_apartment = 1;
        1:  239:    cost = 4.5;
        1:  240:    strcpy(type, "gas");
       1*:  241:    assert(modifyExpense(service, number_of_apartment, cost, type) == 0);
        1:  241-block  0
    %%%%%:  241-block  1
        1:  241-block  2
        -:  242:
        -:  243:
        -:  244:    /////////////////////////////////////////////////////////////////
        -:  245:    //delete expense
        1:  246:    deleteExpense(service, number_of_apartment, type);
        1:  246-block  0
        1:  247:    cost_after = getCostByType(apartment, type);
        -:  248:
       1*:  249:    assert(fabs(0.0 - cost_after) < 0.001);
    %%%%%:  249-block  0
        1:  249-block  1
        -:  250:
        -:  251:    //add expense test with invalid input
        -:  252:    //invalid number
        1:  253:    number_of_apartment = -1;
        1:  254:    strcpy(type, "water");
       1*:  255:    assert(deleteExpense(service, number_of_apartment, type) != 0);
        1:  255-block  0
    %%%%%:  255-block  1
        1:  255-block  2
        -:  256:
        1:  257:    number_of_apartment = 2;
        1:  258:    strcpy(type, "water");
       1*:  259:    assert(deleteExpense(service, number_of_apartment, type) != 0);
        1:  259-block  0
    %%%%%:  259-block  1
        1:  259-block  2
        -:  260:
        -:  261:    //invalid type
        1:  262:    number_of_apartment = 1;
        1:  263:    strcpy(type, "");
       1*:  264:    assert(deleteExpense(service, number_of_apartment, type) != 0);
        1:  264-block  0
    %%%%%:  264-block  1
        1:  264-block  2
        -:  265:
        1:  266:    number_of_apartment = 1;
        1:  267:    strcpy(type, "yes sir");
       1*:  268:    assert(deleteExpense(service, number_of_apartment, type) != 0);
        1:  268-block  0
    %%%%%:  268-block  1
        1:  268-block  2
        -:  269:
        -:  270:    //valid type and number
        1:  271:    number_of_apartment = 1;
        1:  272:    strcpy(type, "water");
       1*:  273:    assert(deleteExpense(service, number_of_apartment, type) == 0);
        1:  273-block  0
    %%%%%:  273-block  1
        1:  273-block  2
        -:  274:
        1:  275:    number_of_apartment = 1;
        1:  276:    strcpy(type, "sewer");
       1*:  277:    assert(deleteExpense(service, number_of_apartment, type) == 0);
        1:  277-block  0
    %%%%%:  277-block  1
        1:  277-block  2
        -:  278:
        1:  279:    number_of_apartment = 1;
        1:  280:    strcpy(type, "heating");
       1*:  281:    assert(deleteExpense(service, number_of_apartment, type) == 0);
        1:  281-block  0
    %%%%%:  281-block  1
        1:  281-block  2
        -:  282:
        1:  283:    number_of_apartment = 1;
        1:  284:    strcpy(type, "gas");
       1*:  285:    assert(deleteExpense(service, number_of_apartment, type) == 0);
        1:  285-block  0
    %%%%%:  285-block  1
        1:  285-block  2
        -:  286:
        1:  287:    destroyService(service);
        1:  287-block  0
        -:  288:
        1:  289:    printf("End of service tests...\n");
        1:  290:}
        -:  291:
        1:  292:void runServiceFiltrationAndSortingTests(){
        1:  293:    printf("Start of service tests...\n");
        1:  293-block  0
        1:  294:    RepositoryImmobile* repository_filtration = createRepository();
        1:  295:    ServiceImmobile* service_filtration = createService(repository_filtration);
        -:  296:
        -:  297:    int number_of_apartments, number_of_apartment;
        -:  298:    double cost;
        -:  299:    char type[256];
        1:  300:    number_of_apartments = 4;
        1:  301:    generateApartments(service_filtration, number_of_apartments);
        -:  302:
        1:  303:    number_of_apartment = 0;
        1:  304:    cost = 4.5;
        1:  305:    strcpy(type, "gas");
        1:  306:    addExpense(service_filtration, number_of_apartment, cost, type);
        -:  307:
        1:  308:    number_of_apartment = 1;
        1:  309:    cost = 3.7;
        1:  310:    strcpy(type, "gas");
        1:  311:    addExpense(service_filtration, number_of_apartment, cost, type);
        -:  312:
        1:  313:    number_of_apartment = 2;
        1:  314:    cost = 6.8;
        1:  315:    strcpy(type, "gas");
        1:  316:    addExpense(service_filtration, number_of_apartment, cost, type);
        -:  317:
        1:  318:    number_of_apartment = 3;
        1:  319:    cost = 5.1;
        1:  320:    strcpy(type, "gas");
        1:  321:    addExpense(service_filtration, number_of_apartment, cost, type);
        -:  322:
        1:  323:    double sum_min = 4.9;
        1:  324:    double sum_max = 7.8;
        -:  325:
        -:  326:    Element items;
        1:  327:    items = filtrationBySumAndType(service_filtration, sum_min, sum_max, "war");
       1*:  328:    assert(items == NULL);
    %%%%%:  328-block  0
        1:  328-block  1
        1:  329:    items = filtrationBySumAndType(service_filtration, 5, 2, "water");
        1:  329-block  0
       1*:  330:    assert(items == NULL);
    %%%%%:  330-block  0
        1:  330-block  1
        -:  331:
        1:  332:    items = filtrationBySumAndType(service_filtration, sum_min, sum_max, type);
        1:  332-block  0
        -:  333:
        1:  334:    DynamicVector *vector_filtration = items;
        -:  335:    //DynamicStaticVector *vector_filtration = items;
        -:  336:
        -:  337:    Apartment* apartment_filtration;
        -:  338:
        1:  339:    apartment_filtration = vector_filtration -> items[0];
        -:  340:
        1:  341:    double test_cost = getCostByType(apartment_filtration, "gas");
        1:  342:    cost = 6.8;
       1*:  343:    assert(fabs(test_cost - cost) < 0.0001);
    %%%%%:  343-block  0
        1:  343-block  1
        -:  344:
        1:  345:    apartment_filtration = vector_filtration -> items[1];
        -:  346:
        1:  347:    test_cost = getCostByType(apartment_filtration, "gas");
        1:  347-block  0
        1:  348:    cost = 5.1;
       1*:  349:    assert(fabs(test_cost - cost) < 0.0001);
    %%%%%:  349-block  0
        1:  349-block  1
        -:  350:
        1:  351:    destroyDynamicVector(vector_filtration);
        1:  351-block  0
        -:  352:    //destroyDynamicStaticVector(vector_filtration);
        -:  353:
        -:  354:    ///////////////////////////////////////
        1:  355:    items = sortingApartmentsBySum(service_filtration, "love");
       1*:  356:    assert(items == NULL);
    %%%%%:  356-block  0
        1:  356-block  1
        -:  357:
        1:  358:    items = sortingApartmentsBySum(service_filtration, "gas");
        1:  358-block  0
        -:  359:
        1:  360:    DynamicVector *vector_sorting = items;
        -:  361:    //DynamicStaticVector *vector_sorting = items;
        -:  362:
        -:  363:    Apartment* apartment_sorting;
        -:  364:
        1:  365:    apartment_sorting = vector_sorting -> items[0];
        -:  366:
        1:  367:    cost = 3.7;
        1:  368:    test_cost = getCostByType(apartment_sorting, "gas");
       1*:  369:    assert(fabs(test_cost - cost) < 0.0001);
    %%%%%:  369-block  0
        1:  369-block  1
        -:  370:
        1:  371:    apartment_sorting = vector_sorting-> items[3];
        -:  372:
        1:  373:    cost = 6.8;
        1:  374:    test_cost = getCostByType(apartment_sorting, "gas");
        1:  374-block  0
       1*:  375:    assert(fabs(test_cost - cost) < 0.0001);
    %%%%%:  375-block  0
        1:  375-block  1
        -:  376:
        1:  377:    destroyDynamicVector(vector_sorting);
        1:  377-block  0
        -:  378:    //destroyDynamicStaticVector(vector_sorting);
        -:  379:
        1:  380:    destroyService(service_filtration);
        1:  381:    printf("End of service tests...\n");
        1:  382:}
        -:  383:
        1:  384:void runAllTests(){
        1:  385:    runDomainTests();
        1:  385-block  0
        1:  386:    runRepositoryTests();
        1:  387:    runServiceCrudTests();
        1:  388:    runServiceFiltrationAndSortingTests();
        1:  389:}

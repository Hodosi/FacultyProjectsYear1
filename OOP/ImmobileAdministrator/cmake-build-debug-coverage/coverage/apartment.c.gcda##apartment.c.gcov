        -:    0:Source:D:/FacultyProjects/OOP/ImmobileAdministrator/domain/apartment.c
        -:    0:Graph:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\domain\apartment.c.gcno
        -:    0:Data:D:\FacultyProjects\OOP\ImmobileAdministrator\cmake-build-debug-coverage\CMakeFiles\ImmobileAdministrator.dir\domain\apartment.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Hodosi on 3/5/2021.
        -:    3://
        -:    4:
        -:    5:#include "valueObject.h"
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        9:    9:Apartment* createApartment(int number_of_apartment){
        9:   10:    Apartment* apartment = (Apartment*)malloc(sizeof(Apartment));
        -:   11:
        9:   12:    apartment -> number_of_apartment = number_of_apartment;
        9:   13:    apartment -> number_of_expenses = 4;
        9:   14:    apartment -> expenses = (Expense**)malloc(sizeof(Expense*) * 4);
        -:   15:
        -:   16:    Expense* expense; //water, sewer, heating, gas
        -:   17:
        9:   18:    char type_water[] = "water";
        9:   19:    expense = createExpense(number_of_apartment, 0, type_water);
        9:   19-block  0
        9:   20:    apartment -> expenses[0] = expense;
        -:   21:
        9:   22:    char type_sewer[] = "sewer";
        9:   23:    expense = createExpense(number_of_apartment, 0, type_sewer);
        9:   24:    apartment -> expenses[1] = expense;
        -:   25:
        9:   26:    char type_heating[] = "heating";
        9:   27:    expense = createExpense(number_of_apartment, 0, type_heating);
        9:   28:    apartment -> expenses[2] = expense;
        -:   29:
        9:   30:    char type_gas[] = "gas";
        9:   31:    expense = createExpense(number_of_apartment, 0, type_gas);
        9:   32:    apartment -> expenses[3] = expense;
        -:   33:
        9:   34:    return apartment;
        -:   35:}
        -:   36:
        9:   37:void destroyApartment(Apartment *apartment){
       45:   38:    for(int i = 0; i < apartment -> number_of_expenses; i++){
        9:   38-block  0
       45:   38-block  1
       36:   39:        destroyExpense(apartment -> expenses[i]);
       36:   39-block  0
        -:   40:    }
        9:   41:    free(apartment -> expenses);
        9:   42:    free(apartment);
        9:   43:}
        -:   44:
        6:   45:Apartment* copyApartment(Apartment *apartment){
        -:   46:
        6:   47:    Apartment *new_apartment = (Apartment*)malloc(sizeof(Apartment));
        -:   48:
        6:   49:    new_apartment -> number_of_apartment = apartment -> number_of_apartment;
        6:   50:    new_apartment -> number_of_expenses = apartment -> number_of_expenses;
        6:   51:    new_apartment -> expenses = (Expense**)malloc(sizeof(Expense*) * 4);
        -:   52:
       30:   53:    for(int i = 0; i < apartment -> number_of_expenses; i++){
        6:   53-block  0
       30:   53-block  1
       24:   54:        new_apartment -> expenses[i] = copyExpense(apartment -> expenses[i]);
       24:   54-block  0
        -:   55:    }
        -:   56:
        6:   57:    return new_apartment;
        6:   57-block  0
        -:   58:}
        -:   59:
        5:   60:int getApartmentNumber(Apartment *apartment){
        5:   61:    return apartment -> number_of_apartment;
        5:   61-block  0
        -:   62:}
        -:   63:
       35:   64:double getCostByType(Apartment *apartment, char *type){
        -:   65:    char new_type[256];
      128:   66:    for(int i = 0; i < apartment -> number_of_expenses; i++){
       35:   66-block  0
       93:   66-block  1
      128:   66-block  2
      128:   67:        getType(apartment -> expenses[i], new_type);
      128:   67-block  0
      128:   68:        if(strcmp(new_type, type) == 0){
       35:   69:            return getCost(apartment -> expenses[i]);
       35:   69-block  0
        -:   70:        }
        -:   71:    }
    #####:   72:}
    %%%%%:   72-block  0
        -:   73:
       20:   74:void setCostByType(Apartment *apartment, char *type, double new_cost){
        -:   75:    char new_type[256];
      100:   76:    for(int i = 0; i < apartment -> number_of_expenses; i++){
       20:   76-block  0
       80:   76-block  1
      100:   76-block  2
       80:   77:        getType(apartment -> expenses[i], new_type);
       80:   77-block  0
       80:   78:        if(strcmp(new_type, type) == 0){
       20:   79:            setCost(apartment -> expenses[i], new_cost);
       20:   79-block  0
        -:   80:        }
        -:   81:    }
       20:   82:}
